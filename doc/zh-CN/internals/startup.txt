姜大虾架构初始化过程
====================

姜大虾的核心和灵魂是插件管理器模块 (\ ``gingerprawn.api.cooker``\ )，因此其架构
初始化过程很大一部分是正确寻找并加载插件模块（\ ``shrimp`` 目录下）的过程。

初始化过程大致可分为两个阶段，首先是加载 wxPython 以及插件管理器之前的准备工
作，然后是在启动窗体之内进行的插件初始化，以元模块，即管理其他模块的主模块运
行结束。下面简要介绍相关机制。

wxPython 加载之前
-----------------

这一部分在 gingerprawn/interface/main.py 的前半段完成。 Windows 平台下，
用户不想看到控制台窗口，于是调用的主文件是同一目录下的 ``winmain.pyw``\ ，
最终结果都是调用 ``main.main()``\ 。

``main.py`` 最先加载的功能模块是 ``optparse``\ ，解析命令行传入的参数。然后通
过 ``__file__`` 获知程序运行的绝对路径，并据此定位到包的顶层目录
``gingerprawn`` ，将当前环境目录切换到其下。这样就可以初始化自身所在的模块了。
至今（2011年3月28日），还没有需要在此处做的工作，
因此 ``gingerprawn/interface/__init__.py`` 是一个 0 字节的空文件，其存在是为
了今后可能有的扩展。

这一阶段的收尾工作是为下一步加载 ``wx`` 做准备。由于江大侠是基于 wxPython
2.8.x 开发，所以利用 ``wxversion`` 选择最合适的 ``wx`` 版本供加载。注意此处
对 ``wxversion`` 的使用为对 ``sys.frozen`` 的检测所保护，因为 Windows 平台下
江大侠的发行版使用 ``py2exe`` 打包为独立可执行文件；没有完整的 Python 环境，
运行库的位置也与标准 Python 安装不同，自由选择版本就无从谈起。

随着 ``import wx`` ，平稳过渡到下一阶段——

伴随图形界面的插件初始化
------------------------

这一部分分别在 ``main.py`` 的后半段和与之位于同一目录的 ``LobsterLoader.py`` 完成。

略去图形界面的代码，主要过程就是 ``wx.App`` 对象的建立，图形化加载窗口
(``LobsterLoader``) 显示完毕后插件加载线程的创建与启动，以及主界面成功开启后
的主窗口转接。

``gingerprawn.api.cooker`` 使用一个由进度窗口提供的回调函数向其汇报动态的插件
加载情况，同时自身保留一份副本存于 ``SHRIMP_LOADSTATUS`` 字典型变量中，方便
各插件按需查看。

插件初始化详细原理
------------------

!!! TODO

.. vi:ai:et:ts=4 sw=4 sts=4 ff=unix fenc=utf-8 syntax=rst
