#!/usr/bin/env python
# -*- coding: utf-8 -*-
# gingerprawn / api.logger / logging framework
#
# Copyright (C) 2011 Wang Xuerui <idontknw.wang@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''\
gingerprawn's logging facility

Being a wrapper of Python's logging library, This module provides packages
with a simple logging functionality, hiding all the details of logging
module.
'''

import os
import logging
import logging.config
_getLogger = logging.getLogger

# module name determining and other inspect stuff refactored out
# of this module
from gingerprawn.api.utils.metaprogramming import *

# logging configuration moved out to conf file
# conf file path now generated by the new configuration manager
from gingerprawn.api.conf import get_conf_filename

PKG_TOPLEV = None # for later fill in
CONF_FILE_PATH = get_conf_filename()

# the logger object
LOGGER = None # also waiting to be inited

# Still not utilizing os.getcwd() or realpath(), but instead use the now
# passed-in-__builtin__-and-later-handled-by-confmgr toplev...
# In short, this module no longer determines the correct path by itself.
def init():
    '''\
    Initialize the logging facility by loading the config file.

    This function should be called early in initialization, and
    should never be called again.
    '''
    global LOGGER
    logging.config.fileConfig(CONF_FILE_PATH)

    # log the fact that we're up and running
    LOGGER = getLogger()
    LOGGER.debug('Logging infrastructure initialized')

def getLogger(name=None, lvldelta=0):
    '''\
    Get a logger for the caller module.
    The logger's name is specified by *name*, or determined using
    inspection if *name* is *None*\ .

    The parameter *lvldelta* should **NOT** be used, unless you're
    doing some nested calls, in which case you should pass it
    something like ``1 + lvldelta``\ .
    '''
    return _getLogger(name) if name is not None \
            else _getLogger(get_modname(1 + lvldelta))

def install(modname=None, handlename='log'):
    '''\
    Installs logging functions (almost all of them bound methods of
    the logger) into the local namespace of caller.

    The logger's name is specified by *modname* or derived automatically
    by means of inspection if *modname* is *None*\ .

    The installed name of logger object is specified by *handlename*\ ,
    defaulting to ``'log'``\ .
    '''
    def is_debug(self):
        return self.isEnabledFor(logging.DEBUG)

    log = getLogger(modname, 1)
    tgt = get_parent_locals(1)
    tgt[handlename] = log
    tgt['logdebug'] = log.debug
    tgt['loginfo'] = log.info
    tgt['logwarning'] = log.warning
    tgt['logerror'] = log.error
    tgt['logcritical'] = log.critical
    tgt['logexception'] = log.exception
    tgt['logisdebug'] = methodize(is_debug, log)


# vi:ai:et:ts=4 sw=4 sts=4 fenc=utf-8
